name: "Pgbouncer | Release"

on:
  push:
    branches:
      - main
    paths:
      - "images/pgbouncer/VERSION"

jobs:
  create-tag:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.read-version.outputs.VERSION }}
      TAG_NAME: ${{ steps.push-tag.outputs.TAG_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Read VERSION File
        id: read-version
        run: |
          VERSION=$(cat images/pgbouncer/VERSION)
          if ! echo "$VERSION" | grep -q -P "^\d+.\d+.\d+-patch\.\d+$"; then
              echo "::error::images/pgbouncer/VERSION must match regex ^\d+.\d+.\d+-patch\.\d+$ but got: '$VERSION'"
              exit 1
          fi
          echo "::set-output name=VERSION::$VERSION"

      - name: Create Tag if Not Already Present
        id: push-tag
        run: |
          TAG_NAME="images/pgbouncer-${{ steps.read-version.outputs.VERSION }}"
          if git show-ref --verify --quiet "refs/tags/$TAG_NAME"; then
              export CURRENT_HASH=$(git log -1 --format="%H")
              export TAG_HASH=$(git show-ref --hash "refs/tags/$TAG_NAME")
              echo "::warning::current hash = $CURRENT_HASH"
              echo "::warning::tag's hash   = $TAG_HASH"
              if [ "$CURRENT_HASH" = "$TAG_HASH" ]; then
                  echo "::warning::tag '$TAG_NAME' already exists, and has the expected hash, continuing..."
              else
                  echo "::error::tag '$TAG_NAME' already exists, but has an unexpected hash, failing..."
                  exit 1
              fi
          else
              git tag "$TAG_NAME"
              git push origin "$TAG_NAME"
          fi
          echo "::set-output name=TAG_NAME::$TAG_NAME"

  build-and-push:
    needs: create-tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.create-tag.outputs.TAG_NAME }}
          fetch-depth: 0

      - name: Install QEMU
        uses: docker/setup-qemu-action@v1

      - name: Install Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Image Tags/Labels
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            airflowhelm/pgbouncer
            ghcr.io/${{ github.repository_owner }}/pgbouncer
          flavor: |
            latest=true
          tags: |
            type=match,priority=100,pattern=\d+.\d+.\d+,value=${{ needs.create-tag.outputs.VERSION }}
            type=raw,priority=200,value=${{ needs.create-tag.outputs.VERSION }}
          labels: |
            org.opencontainers.image.title=pgbouncer
            org.opencontainers.image.description=the pgbouncer image for the user-community airflow helm chart
            org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/charts/tree/main/images/pgbouncer
            org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/charts/tree/main/images/pgbouncer

      - name: Build and Push Image
        uses: docker/build-push-action@v2
        with:
          context: ./images/pgbouncer
          push: true
          platforms: |
            linux/amd64
            linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}