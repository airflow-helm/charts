apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "airflow.fullname" . }}-web
  {{- if .Values.web.annotations }}
  annotations:
    {{- toYaml .Values.web.annotations | nindent 4 }}
  {{- end }}
  labels:
    app: {{ include "airflow.labels.app" . }}
    component: web
    chart: {{ include "airflow.labels.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    {{- if .Values.web.labels }}
    {{- toYaml .Values.web.labels | nindent 4 }}
    {{- end }}
spec:
  replicas: {{ .Values.web.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      ## multiple web pods can safely run concurrently
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: {{ include "airflow.labels.app" . }}
      component: web
      release: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        checksum/config-env: {{ include (print $.Template.BasePath "/config/configmap-env.yaml") . | sha256sum }}
        checksum/config-scripts-git: {{ include (print $.Template.BasePath "/config/configmap-scripts-git.yaml") . | sha256sum }}
        checksum/config-scripts: {{ include (print $.Template.BasePath "/config/configmap-scripts.yaml") . | sha256sum }}
        checksum/config-webserver-config: {{ include (print $.Template.BasePath "/config/secret-webserver-config.yaml") . | sha256sum }}
        {{- if .Values.airflow.podAnnotations }}
        {{- toYaml .Values.airflow.podAnnotations | nindent 8 }}
        {{- end }}
        {{- if .Values.web.podAnnotations }}
        {{- toYaml .Values.web.podAnnotations | nindent 8 }}
        {{- end }}
        {{- if .Values.web.safeToEvict }}
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        {{- end }}
      labels:
        app: {{ include "airflow.labels.app" . }}
        component: web
        release: {{ .Release.Name }}
        {{- if .Values.web.podLabels }}
        {{- toYaml .Values.web.podLabels | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.airflow.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.airflow.image.pullSecret }}
      {{- end }}
      restartPolicy: Always
      {{- if .Values.web.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.web.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.web.affinity }}
      affinity:
        {{- toYaml .Values.web.affinity | nindent 8 }}
      {{- end }}
      {{- if .Values.web.tolerations }}
      tolerations:
        {{- toYaml .Values.web.tolerations | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "airflow.serviceAccountName" . }}
      {{- if .Values.web.securityContext }}
      securityContext:
        {{- toYaml .Values.web.securityContext | nindent 8 }}
      {{- end }}
      initContainers:
        {{- include "airflow.init_container.wait_for_db_migrations" . | indent 8 }}
        {{- if and (.Values.dags.initContainer.enabled) (not .Values.web.serializeDAGs) }}
        {{- include "airflow.init_container.git_clone" . | indent 8 }}
        {{- end }}
      containers:
        - name: airflow-web
          image: {{ .Values.airflow.image.repository }}:{{ .Values.airflow.image.tag }}
          imagePullPolicy: {{ .Values.airflow.image.pullPolicy}}
          resources:
            {{- toYaml .Values.web.resources | nindent 12 }}
          ports:
            - name: web
              containerPort: 8080
              protocol: TCP
          envFrom:
            - configMapRef:
                name: "{{ include "airflow.fullname" . }}-env"
          env:
            {{- include "airflow.mapenvsecrets" . | indent 12 }}
          command:
            - "/usr/bin/dumb-init"
            - "--"
          args:
            - "bash"
            - "-c"
            - >
              true \
               && mkdir -p /home/airflow/.local/bin \
               && export PATH="/home/airflow/.local/bin:$PATH" \
              {{- if .Values.dags.installRequirements }}
               && echo "*** installing requirements..." \
               && /home/airflow/scripts/install-requirements.sh \
              {{- end }}
              {{- if .Values.airflow.extraPipPackages }}
               && echo "*** installing global extra pip packages..." \
               && pip install --user {{ range .Values.airflow.extraPipPackages }} {{ . | quote }} {{ end }} \
              {{- end }}
              {{- if .Values.web.extraPipPackages }}
               && echo "*** installing extra pip packages..." \
               && pip install --user {{ range .Values.web.extraPipPackages }} {{ . | quote }} {{ end }} \
              {{- end }}
               && echo "*** running webserver..." \
               && exec airflow webserver
          {{- if .Values.web.livenessProbe.enabled }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.web.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.web.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.web.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.web.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.web.livenessProbe.failureThreshold }}
            httpGet:
              scheme: {{ .Values.web.livenessProbe.scheme }}
              {{- if .Values.ingress.web.livenessPath }}
              path: "{{ .Values.ingress.web.livenessPath }}"
              {{- else }}
              path: "{{ .Values.ingress.web.path }}/health"
              {{- end }}
              port: web
          {{- end }}
          {{- if .Values.web.readinessProbe.enabled }}
          readinessProbe:
            initialDelaySeconds: {{ .Values.web.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.web.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.web.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.web.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.web.readinessProbe.failureThreshold }}
            httpGet:
              scheme: {{ .Values.web.readinessProbe.scheme }}
              path: "{{ .Values.ingress.web.path }}/health"
              port: web
          {{- end }}
          volumeMounts:
            {{- include "airflow.common.volumeMounts" . | indent 12 }}
            {{- if .Values.web.secretsMap }}
            - name: {{ .Values.web.secretsMap }}-volume
              mountPath: {{ .Values.web.secretsDir }}
              readOnly: true
            {{- else }}
            {{- range .Values.web.secrets }}
            - name: {{ . }}-volume
              mountPath: {{ $.Values.web.secretsDir }}/{{ . }}
              readOnly: true
            {{- end }}
            {{- end }}
            - name: webserver-config
              mountPath: /opt/airflow/webserver_config.py
              subPath: webserver_config.py
              readOnly: true
        {{- if and (.Values.dags.git.gitSync.enabled) (not .Values.web.serializeDAGs) }}
        {{- include "airflow.container.git_sync" . | indent 8 }}
        {{- end }}
        {{- if .Values.airflow.extraContainers }}
        {{- toYaml .Values.airflow.extraContainers | nindent 8 }}
        {{- end }}
      volumes:
        {{- include "airflow.common.volumes" . | indent 8 }}
        {{- if .Values.web.secretsMap }}
        - name: {{ .Values.web.secretsMap }}-volume
          secret:
            secretName: {{ .Values.web.secretsMap }}
        {{- else }}
        {{- range .Values.web.secrets }}
        - name: {{ . }}-volume
          secret:
            secretName: {{ . }}
        {{- end }}
        {{- end }}
        - name: webserver-config
          secret:
            secretName: {{ include "airflow.fullname" . }}-webserver-config

