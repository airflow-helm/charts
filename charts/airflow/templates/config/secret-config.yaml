apiVersion: v1
kind: Secret
metadata:
  name: {{ include "airflow.fullname" . }}-config
  labels:
    app: {{ include "airflow.labels.app" . }}
    chart: {{ include "airflow.labels.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
stringData:
  ## ================
  ## Linux Configs
  ## ================
  TZ: "Etc/UTC"

  ## ================
  ## Database Configs
  ## ================
  ## connection string components
  {{- if .Values.postgresql.enabled }}
  DATABASE_HOST: {{ (include "airflow.postgresql.fullname" .) | quote }}
  DATABASE_PORT: "5432"
  DATABASE_USER: {{ .Values.postgresql.postgresqlUsername | quote }}
  DATABASE_DB: {{ .Values.postgresql.postgresqlDatabase | quote }}
  {{- else }}
  DATABASE_HOST: {{ .Values.externalDatabase.host | quote }}
  DATABASE_PORT: {{ .Values.externalDatabase.port | quote }}
  DATABASE_USER: {{ .Values.externalDatabase.user | quote}}
  DATABASE_DB: {{ .Values.externalDatabase.database | quote }}
  DATABASE_PROPERTIES: {{ .Values.externalDatabase.properties | quote }}
  {{- end }}

  ## bash command which echos the URL encoded value of $DATABASE_PASSWORD
  DATABASE_PASSWORD_CMD: |-
    echo "${DATABASE_PASSWORD}" | python3 -c "import urllib.parse; encoded_pass = urllib.parse.quote(input()); print(encoded_pass)"

  ## bash command which echos the DB connection string in SQLAlchemy format
  DATABASE_SQLALCHEMY_CMD: |-
    {{- if .Values.postgresql.enabled }}
    echo -n "postgresql+psycopg2://${DATABASE_USER}:$(eval $DATABASE_PASSWORD_CMD)@${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DB}"
    {{- else if and (not .Values.postgresql.enabled) (eq "postgres" .Values.externalDatabase.type) }}
    echo -n "postgresql+psycopg2://${DATABASE_USER}:$(eval $DATABASE_PASSWORD_CMD)@${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DB}${DATABASE_PROPERTIES}"
    {{- else if and (not .Values.postgresql.enabled) (eq "mysql" .Values.externalDatabase.type) }}
    echo -n "mysql+mysqldb://${DATABASE_USER}:$(eval $DATABASE_PASSWORD_CMD)@${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DB}${DATABASE_PROPERTIES}"
    {{- end }}

  ## bash command which echos the DB connection string in Celery result_backend format
  DATABASE_CELERY_CMD: |-
    {{- if .Values.postgresql.enabled }}
    echo -n "db+postgresql://${DATABASE_USER}:$(eval $DATABASE_PASSWORD_CMD)@${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DB}"
    {{- else if and (not .Values.postgresql.enabled) (eq "postgres" .Values.externalDatabase.type) }}
    echo -n "db+postgresql://${DATABASE_USER}:$(eval $DATABASE_PASSWORD_CMD)@${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DB}${DATABASE_PROPERTIES}"
    {{- else if and (not .Values.postgresql.enabled) (eq "mysql" .Values.externalDatabase.type) }}
    echo -n "db+mysql://${DATABASE_USER}:$(eval $DATABASE_PASSWORD_CMD)@${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DB}${DATABASE_PROPERTIES}"
    {{- end }}

  ## ================
  ## Redis Configs
  ## ================
  {{- if include "airflow.executor.celery_like" . }}
  ## connection string components
  {{- if .Values.redis.enabled }}
  REDIS_HOST: "{{ include "airflow.redis.fullname" . }}-master"
  REDIS_PORT: "6379"
  REDIS_DBNUM: "1"
  {{- else }}
  REDIS_HOST: {{ .Values.externalRedis.host | quote }}
  REDIS_PORT: {{ .Values.externalRedis.port | quote }}
  REDIS_DBNUM: {{ .Values.externalRedis.databaseNumber | quote }}
  {{- end }}

  ## a bash command which echos the URL encoded value of $REDIS_PASSWORD
  ## NOTE: if $REDIS_PASSWORD is non-empty, prints `:${REDIS_PASSWORD}@`, else ``
  REDIS_PASSWORD_CMD: |-
    echo "${REDIS_PASSWORD}" | python3 -c "import urllib.parse; encoded_pass = urllib.parse.quote(input()); print(f\":{encoded_pass}@\") if len(encoded_pass) > 0 else None"

  ## a bash command which echos the Redis connection string
  REDIS_CONNECTION_CMD: |-
    echo -n "redis://$(eval $REDIS_PASSWORD_CMD)${REDIS_HOST}:${REDIS_PORT}/${REDIS_DBNUM}"
  {{- end }}

  ## ================
  ## Airflow Configs (General)
  ## ================
  AIRFLOW__CORE__DAGS_FOLDER: {{ (include "airflow.dags.path" .) | quote }}
  AIRFLOW__CORE__EXECUTOR: {{ .Values.airflow.executor | quote }}
  AIRFLOW__CORE__FERNET_KEY: {{ .Values.airflow.fernetKey | quote }}
  AIRFLOW__CORE__SQL_ALCHEMY_CONN_CMD: |-
    bash -c 'eval "$DATABASE_SQLALCHEMY_CMD"'
  AIRFLOW__WEBSERVER__WEB_SERVER_PORT: "8080"
  AIRFLOW__CELERY__FLOWER_PORT: "5555"

  {{- if and (.Values.dags.gitSync.enabled) (not .Values.airflow.config.AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL) }}
  ## refresh the dags folder at the same frequency as git-sync
  AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: {{ .Values.dags.gitSync.syncWait | quote }}
  {{- end }}

  {{- if .Values.airflow.legacyCommands }}
  {{- if not .Values.airflow.config.AIRFLOW__WEBSERVER__RBAC }}
  ## default to the RBAC UI when in legacy mode
  AIRFLOW__WEBSERVER__RBAC: "true"
  {{- end }}
  {{- end }}

  ## ================
  ## Airflow Configs (Logging)
  ## ================
  {{- if .Values.airflow.legacyCommands }}
  AIRFLOW__CORE__BASE_LOG_FOLDER: {{ .Values.logs.path | quote }}
  AIRFLOW__CORE__DAG_PROCESSOR_MANAGER_LOG_LOCATION: {{ (printf "%s/dag_processor_manager/dag_processor_manager.log" .Values.logs.path) | quote }}
  {{- else }}
  AIRFLOW__LOGGING__BASE_LOG_FOLDER: {{ .Values.logs.path | quote }}
  AIRFLOW__LOGGING__DAG_PROCESSOR_MANAGER_LOG_LOCATION: {{ (printf "%s/dag_processor_manager/dag_processor_manager.log" .Values.logs.path) | quote }}
  {{- end }}
  AIRFLOW__SCHEDULER__CHILD_PROCESS_LOG_DIRECTORY: {{ (printf "%s/scheduler" .Values.logs.path) | quote }}

  ## ================
  ## Airflow Configs (Celery)
  ## ================
  {{- if include "airflow.executor.celery_like" . }}
  AIRFLOW__CELERY__WORKER_LOG_SERVER_PORT: "8793"
  AIRFLOW__CELERY__BROKER_URL_CMD: |-
    bash -c 'eval "$REDIS_CONNECTION_CMD"'
  AIRFLOW__CELERY__RESULT_BACKEND_CMD: |-
    bash -c 'eval "$DATABASE_CELERY_CMD"'
  {{- end }}

  ## ================
  ## Airflow Configs (Kubernetes)
  ## ================
  {{- if include "airflow.executor.kubernetes_like" . }}
  {{- if not .Values.airflow.config.AIRFLOW__KUBERNETES__NAMESPACE }}
  AIRFLOW__KUBERNETES__NAMESPACE: {{ .Release.Namespace | quote }}
  {{- end }}
  {{- if not .Values.airflow.config.AIRFLOW__KUBERNETES__WORKER_CONTAINER_REPOSITORY }}
  AIRFLOW__KUBERNETES__WORKER_CONTAINER_REPOSITORY: {{ .Values.airflow.image.repository | quote }}
  {{- end }}
  {{- if not .Values.airflow.config.AIRFLOW__KUBERNETES__WORKER_CONTAINER_TAG }}
  AIRFLOW__KUBERNETES__WORKER_CONTAINER_TAG: {{ .Values.airflow.image.tag | quote }}
  {{- end }}
  {{- if not .Values.airflow.config.AIRFLOW__KUBERNETES__POD_TEMPLATE_FILE }}
  AIRFLOW__KUBERNETES__POD_TEMPLATE_FILE: "/opt/airflow/pod_templates/pod_template.yaml"
  {{- end }}

  {{- if .Values.airflow.legacyCommands }}
  {{- if not .Values.airflow.config.AIRFLOW__KUBERNETES__ENV_FROM_CONFIGMAP_REF }}
  AIRFLOW__KUBERNETES__ENV_FROM_SECRET_REF: "{{ include "airflow.fullname" . }}-config"
  {{- end }}
  {{- if (not .Values.airflow.config.AIRFLOW__KUBERNETES__WORKER_SERVICE_ACCOUNT_NAME) }}
  AIRFLOW__KUBERNETES__WORKER_SERVICE_ACCOUNT_NAME: {{ (include "airflow.serviceAccountName" .) | quote }}
  {{- end }}
  {{- end }}
  {{- end }}

  ## ================
  ## User Configs
  ## ================
  {{- if .Values.airflow.config }}
  {{- toYaml .Values.airflow.config | nindent 2 }}
  {{- end }}