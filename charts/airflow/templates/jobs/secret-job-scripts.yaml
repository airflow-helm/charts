apiVersion: v1
kind: Secret
metadata:
  name: {{ include "airflow.fullname" . }}-job-scripts
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  labels:
    app: {{ include "airflow.labels.app" . }}
    component: jobs
    chart: {{ include "airflow.labels.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
stringData:
  create_connections.py: |-
    from airflow.models import Connection
    from airflow.utils.db import create_session

    {{- if .Values.airflow.connectionsUpdate }}
    {{ "" }}
    def compare_connections(c1: Connection, c2: Connection) -> bool:
      return c1.conn_id == c2.conn_id \
         and c1.conn_type == c2.conn_type \
         {{- if not .Values.airflow.legacyCommands }}
         and c1.description == c2.description \
         {{- end }}
         and c1.host == c2.host \
         and c1.login == c2.login \
         and c1.password == c2.password \
         and c1.schema == c2.schema \
         and c1.port == c2.port \
         and c1.extra == c2.extra
    {{- end }}

    connections = [
      {{- range .Values.airflow.connections }}
      Connection(
        conn_id={{ (required "each `id` in `airflow.connecitons` must be non-empty!" .id) | quote }},
        conn_type={{ (required "each `type` in `airflow.connecitons` must be non-empty!" .type) | quote }},
      {{- if .description }}
        {{- if not $.Values.airflow.legacyCommands }}
        description={{ .description | quote }},
        {{- end }}
      {{- end }}
      {{- if .host }}
        host={{ .host | quote }},
      {{- end }}
      {{- if .login }}
        login={{ .login | quote }},
      {{- end }}
      {{- if .password }}
        password={{ .password | quote }},
      {{- end }}
      {{- if .schema }}
        schema={{ .schema | quote }},
      {{- end }}
      {{- if .port }}
        {{- if not (or (typeIs "float64" .port) (typeIs "int64" .port)) }}
        {{- /* the type of a number could be float64 or int64 depending on how it was set */ -}}
        {{ required "each `port` in `airflow.connections` must be int-type!" nil }}
        {{- end }}
        port={{ .port }},
      {{- end }}
      {{- if .extra }}
        extra={{ .extra | quote }},
      {{- end }}
      ),
      {{- end }}
    ]

    for c in connections:
      with create_session() as session:
        query_result = session.query(Connection).filter(Connection.conn_id == c.conn_id).first()
        if not query_result:
          session.add(c)
          print(f"Connection=`{c.conn_id}` was successfully added.")
        else:
          {{- if .Values.airflow.connectionsUpdate }}
          if compare_connections(c, query_result):
            print(f"Connection=`{c.conn_id}` already exists as defined, skipping.")
          else:
            print(f"Connection=`{c.conn_id}` already exists but has changed, updating...")
            query_result.conn_type = c.conn_type
            {{- if not .Values.airflow.legacyCommands }}
            query_result.description = c.description
            {{- end }}
            query_result.host = c.host
            query_result.login = c.login
            query_result.password = c.password
            query_result.schema = c.schema
            query_result.port = c.port
            query_result.extra = c.extra
            print(f"Connection=`{c.conn_id}` was successfully updated.")
          {{- else }}
          print(f"Connection=`{c.conn_id}` already exists, skipping.")
          {{- end }}

  create_pools.py: |-
    from airflow.models import Pool
    from airflow.utils.db import create_session

    def create_pool(name: str, slots: int, description: str) -> Pool:
      pool = Pool()
      pool.pool = name
      pool.slots = slots
      pool.description = description
      return pool

    {{- if .Values.airflow.poolsUpdate }}
    {{ "" }}
    def compare_pools(p1: Pool, p2: Pool) -> bool:
      return p1.pool == p2.pool \
         and p1.slots == p2.slots \
         and p1.description == p2.description
    {{- end }}

    pools = [
      {{- range .Values.airflow.pools }}
      create_pool(
        name={{ (required "each `name` in `airflow.pools` must be non-empty!" .name) | quote }},
        {{- if not (or (typeIs "float64" .slots) (typeIs "int64" .slots)) }}
        {{- /* the type of a number could be float64 or int64 depending on how it was set */ -}}
        {{ required "each `slots` in `airflow.pools` must be int-type!" nil }}
        {{- end }}
        slots={{ (required "each `slots` in `airflow.pools` must be non-empty!" .slots) }},
        description={{ (required "each `description` in `airflow.pools` must be non-empty!" .description) | quote }},
      ),
      {{- end }}
    ]

    for p in pools:
      with create_session() as session:
        query_result = session.query(Pool).filter(Pool.pool == p.pool).first()
        if not query_result:
          session.add(p)
          print(f"Pool=`{p.pool}` was successfully added.")
        else:
          {{- if .Values.airflow.poolsUpdate }}
          if compare_pools(p, query_result):
            print(f"Pool=`{p.pool}` already exists as defined, skipping.")
          else:
            print(f"Pool=`{p.pool}` already exists but has changed, updating...")
            query_result.slots = p.slots
            query_result.description = p.description
            print(f"Pool=`{p.pool}` was successfully updated.")
          {{- else }}
          print(f"Pool=`{p.pool}` already exists, skipping.")
          {{- end }}

  create_users.py: |-
    import sys
    from flask_appbuilder.security.sqla.models import User, Role
    from typing import Dict
    from werkzeug.security import check_password_hash, generate_password_hash
    {{- if .Values.airflow.legacyCommands }}
    from airflow.www_rbac.app import cached_appbuilder
    appbuilder = cached_appbuilder()
    {{- else }}
    from airflow.www.app import cached_app
    appbuilder = cached_app().appbuilder
    {{- end }}

    {{- if .Values.airflow.usersUpdate }}
    {{ "" }}
    def compare_users(user_dict: Dict, user_model: User) -> bool:
      return user_dict["username"] == user_model.username \
         and user_dict["first_name"] == user_model.first_name \
         and user_dict["last_name"] == user_model.last_name \
         and user_dict["email"] == user_model.email \
         and [user_dict["role"]] == user_model.roles \
         and check_password_hash(pwhash=user_model.password, password=user_dict["password"])
    {{- end }}

    def find_role(role_name: str) -> Role:
      found_role = appbuilder.sm.find_role(role_name)
      if found_role:
          return found_role
      else:
          valid_roles = appbuilder.sm.get_all_roles()
          print(f"Failed to find role=`{role_name}`, valid roles are: {valid_roles}")
          sys.exit(1)

    user_dicts = [
      {{- range .Values.airflow.users }}
      {
        "username": {{ (required "each `username` in `airflow.users` must be non-empty!" .username) | quote }},
        "first_name": {{ (required "each `firstName` in `airflow.users` must be non-empty!" .firstName) | quote }},
        "last_name": {{ (required "each `lastName` in `airflow.users` must be non-empty!" .lastName) | quote }},
        "email": {{ (required "each `email` in `airflow.users` must be non-empty!" .email) | quote }},
        "role": find_role({{ (required "each `role` in `airflow.users` must be non-empty!" .role) | quote }}),
        "password": {{ (required "each `password` in `airflow.users` must be non-empty!" .password) | quote }},
      },
      {{- end }}
    ]

    for u in user_dicts:
      existing_user = appbuilder.sm.find_user(username=u["username"])
      if not existing_user:
        if appbuilder.sm.add_user(
          username=u["username"],
          first_name=u["first_name"],
          last_name=u["last_name"],
          email=u["email"],
          role=u["role"],
          password=u["password"]
        ):
          print(f"User=`{u['username']}` was successfully added.")
        else:
          print(f"Failed to add User=`{u['username']}`")
          sys.exit(1)
      else:
        {{- if .Values.airflow.usersUpdate }}
        if compare_users(u, existing_user):
          print(f"User=`{u['username']}` already exists as defined, skipping.")
        else:
          print(f"User=`{u['username']}` already exists but has changed, updating...")
          existing_user.first_name = u["first_name"]
          existing_user.last_name = u["last_name"]
          existing_user.email = u["email"]
          existing_user.roles = [u["role"]]
          existing_user.password = generate_password_hash(u["password"])
          # strange check for False is because update_user() returns None for success
          # but in future might return the User model
          if not (appbuilder.sm.update_user(existing_user) is False):
            print(f"User=`{u['username']}` was successfully updated.")
          else:
            print(f"Failed to update User=`{u['username']}`")
            sys.exit(1)
        {{- else }}
        print(f"User=`{u['username']}` already exists, skipping.")
        {{- end }}

  create_variables.py: |-
    from airflow.models import Variable
    from airflow.utils.db import create_session

    def create_variable(key: str, val: str) -> Variable:
      variable = Variable()
      variable.key = key
      variable.val = val
      return variable

    {{- if .Values.airflow.variablesUpdate }}
    {{ "" }}
    def compare_variables(v1: Variable, v2: Variable) -> bool:
      return v1.key == v2.key \
         and v1.val == v2.val
    {{- end }}

    variables = [
      {{- range .Values.airflow.variables }}
      create_variable(
        key={{ (required "each `key` in `airflow.variables` must be non-empty!" .key) | quote }},
        val={{ (required "each `value` in `airflow.variables` must be non-empty!" .value) | quote }},
      ),
      {{- end }}
    ]

    for v in variables:
      with create_session() as session:
        query_result = session.query(Variable).filter(Variable.key == v.key).first()
        if not query_result:
          session.add(v)
          print(f"Variable=`{v.key}` was successfully added.")
        else:
          {{- if .Values.airflow.variablesUpdate }}
          if compare_variables(v, query_result):
            print(f"Variable=`{v.key}` already exists as defined, skipping.")
          else:
            print(f"Variable=`{v.key}` already exists but has changed, updating...")
            query_result.val = v.val
            print(f"Variable=`{v.key}` was successfully updated.")
          {{- else }}
          print(f"Variable=`{v.key}` already exists, skipping.")
          {{- end }}